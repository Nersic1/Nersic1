from aiogram import Bot
from random import choices
from datetime import date
from collections import Counter

from services.user_service import get_inactive_users, mark_promo_sent

PROMO_REWARDS = [
    ('–°–∫–∏–¥–∫–∞ 500 —Ä—É–±–ª–µ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑', 0.75),
    ('–°–∫–∏–¥–∫–∞ 750 —Ä—É–±–ª–µ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑', 0.5),
    ('–°–∫–∏–¥–∫–∞ 10%', 0.35),
    ('–°–∫–∏–¥–∫–∞ 20%', 0.15),
    ('–°–∫–∏–¥–∫–∞ 30%', 0.005),
]

def get_random_reward():
    rewards = [r[0]for r in PROMO_REWARDS] # ["–°–∫–∏–¥–∫–∞ 10%", "–°–∫–∏–¥–∫–∞ 20%", ...] –≤–æ–æ–±—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤–µ
    weights = [r[1]for r in PROMO_REWARDS] # [0.5, 0.3, 0.15, 0.05] –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
    return choices(rewards,weights=weights)[0] # –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–ª—é—à–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏

async def promo_check(bot: Bot):
    users = await get_inactive_users()# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø–æ–∫—É–ø–∞–≤—à–∏—Ö 60+ –¥–Ω–µ–π
    for user in users:
        print(f"{type(user)} -> {user}")
        telegram_id = user["telegram_id"]

        reward = get_random_reward()

        try:
            await  bot.send_message(
                telegram_id,
                f'–ü—Ä–∏–≤–µ—Ç! –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫ –∏ —Ä–µ—à–∏–ª–∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è üéÅ\n'
                f'–ù–∞—à –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç–µ–±–µ: {reward}\n'
                f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
                reply_markup=None  # –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            )

            await  mark_promo_sent(telegram_id)

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {telegram_id}: {e}")

def test_random_rewards_distribution(trials: int = 100):
    counter = Counter()
    for _ in range(trials):
        reward = get_random_reward()
        counter[reward] += 1

    print(f"\nüé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ {trials} –ø–æ–ø—ã—Ç–æ–∫:\n")
    for reward, count in counter.items():
        percent = round(count / trials * 100, 2)
        print(f"{reward}: {count} —Ä–∞–∑ ({percent}%)")

test_random_rewards_distribution(10000)